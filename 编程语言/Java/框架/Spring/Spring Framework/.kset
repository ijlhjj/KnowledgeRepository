1、Spring的两个核心特性是依赖注入（Dependency Injection，DI）和面向切面编程（Aspect-Oriented Programming，AOP）。
2、耦合具有两面性：一方面，紧密耦合的代码难以测试、难以复用、难以理解，并且典型地表现出“打地鼠”式的bug特性（修复一个bug，将会出现一个或者更多新的bug）。另一方面，一定程度的耦合又是必须的——完全没有耦合的代码什么也做不了。为了完成有实际意义的功能，不同的类必须以适当的方式进行交互。总而言之，耦合是必须的，但应当被小心谨慎地管理。
3、DI所带来的最大收益——松耦合。如果一个对象只通过接口（而不是具体实现或初始化过程）来表明依赖关系，那么这种依赖就能够在对象本身毫不知情的情况下，用不同的具体实现进行替换。不管你使用的是基于XML的配置还是基于Java的配置，DI所带来的收益都是相同的。
4、创建应用对象之间协作关系的行为通常称为装配（wiring），这也是依赖注入（DI）的本质。
5、Spring的三种装配机制：
    在XML中进行显式配置；
    在Java中进行显式配置；
    隐式的bean发现机制和自动装配。
    通常的建议是：尽可能地使用自动配置的机制，显式配置越少越好。当你必须要显式配置bean的时候（比如，有些源码不是由你来维护的，而当你需要为这些代码配置bean的时候），推荐使用类型安全并且比XML更加强大的JavaConfig。最后，只有当你想要使用便利的XML命名空间，并且在JavaConfig中没有同样的实现时，才应该使用XML。
    相对于基于XML的配置方式，基于Java的配置会带来多项额外的收益，包括更强的类型安全性以及更好的重构能力。
6、如果没有其他配置的话，@ComponentScan默认会扫描与配置类相同的包（包括所有子包）。
7、Spring自动扫描会将类名的第一个字母小写作为bean的ID，可通过给@Component注解传递值指定bean的ID。
    JavaConfig配置默认情况下将带有@Bean注解的方法名作为bean的ID，可通过name属性指定bean的ID。
8、Spring支持将@Named作为@Component注解的替代方案。两者之间有一些细微的差异，但是在大多数场景中，它们是可以互相替换的。
    同样的，Spring支持使用@Inject注解替代@Autowired注解。
9、默认情况下，Spring中的bean都是单例的。
10、在Spring初始化bean之后，它会尽可能的去满足bean的依赖。如果没有匹配的bean，那么在应用上下文创建的时候，Spring会抛出一个异常。为了避免异常的出现，你可以将@Autowired的required属性设置为false。将required属性设置为false时，Spring会尝试执行自动装配，但是如果没有匹配的bean的话，Spring将会让这个bean处于未装配的状态。但是，把required属性设置为false时，你需要谨慎对待。如果在你的代码中没有进行null检查的话，这个处于未装配状态的属性有可能会出现NullPointerException。如果有多个bean都能满足依赖关系的话，Spring将会抛出一个异常，表明没有明确指定要选择哪个bean进行自动装配。
11、@Autowired注解可以用在构造器上、属性的Setter方法上和直接用在属性上。
12、混合配置的导入：
    Java配置导入Java配置：@Import
    Java配置导入xml配置：@ImportResource
    xml配置导入xml配置：<import>
    xml配置导入Java配置：<bean> （把配置类声明为bean）
13、在Java配置中，可以使用@Profile注解指定某个bean属于哪一个profile。
    我们也可以通过<beans>元素的profile属性，在XML中配置profile bean。
    还可以在根<beans>元素中嵌套定义<beans>元素，而不是为每个环境都创建一个profile XML文件。这能够将所有的profile bean定义放到同一个XML文件中。
    没有指定profile的bean始终都会被创建，与激活哪个profile没有关系。
14、Spring在确定哪个profile处于激活状态时，需要依赖两个独立的属性：spring.profiles.active和spring.profiles.default。如果设置了spring.profiles.active属性的话，那么它的值就会用来确定哪个profile是激活的。但如果没有设置spring.profiles.active属性的话，那Spring将会查找spring.profiles.default的值。如果spring.profiles.active和spring.profiles.default均没有设置的话，那就没有激活的profile，因此只会创建那些没有定义在profile中的bean。
15、有多种方式来设置这两个属性：
    作为DispatcherServlet的初始化参数；
    作为Web应用的上下文参数；
    作为JNDI条目；
    作为环境变量；
    作为JVM的系统属性；
    在集成测试类上，使用@ActiveProfiles注解设置。
16、可以同时激活多个profile，这可以通过列出多个profile名称，并以逗号分隔来实现。
17、@Conditional注解可以用到带有@Bean注解的方法上，如果给定的条件计算结果为true，就会创建这个bean，否则的话，这个bean会被忽略。
    设置给@Conditional的类可以是任意实现了Condition接口的类型。
18、通过ConditionContext，我们可以做到如下几点：
    借助getRegistry()返回的BeanDefinitionRegistry检查bean定义；
    借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在，甚至探查bean的属性；
    借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么；
    读取并探查getResourceLoader()返回的ResourceLoader所加载的资源；
    借助getClassLoader()返回的ClassLoader加载并检查类是否存在。
19、AnnotatedTypeMetadata则能够让我们检查带有@Bean注解的方法上还有什么其他的注解以及检查其他注解的属性。
20、解决自动装配的歧义性：
    可以通过@Primary将bean设为首选bean。@Primary能与@Component组合用在组件扫描上，也可以与@Bean组合用在Java配置中。在xml配置中，可以通过<bean>元素的primary属性来达到同样的目的。
    使用限定符确定无歧义性的唯一bean。@Qualifier注解是使用限定符的主要方式，它可以与@Component或@Bean组合在配置时指定bean的限定符，并与@Autowired和@Inject注解组合使用在注入时指定注入bean的限定符。
21、Spring定义了多种作用域，默认的作用域是单例：
    单例（Singleton）：在整个应用中，只创建bean的一个实例。
    原型（Prototype）：每次注入或者通过Spring应用上下文获取的时候，都会创建一个新的bean实例。
    会话（Session）：在Web应用中，为每个会话创建一个bean实例。
    请求（Rquest）：在Web应用中，为每个请求创建一个bean实例。
22、@Scope的proxyMode属性解决将会话或请求作用域的bean注入到单例bean时所遇到的问题。Spring会注入一个bean代理进行懒解析并调用实际的bean方法。<aop:scoped-proxy>是与proxyMode属性功能相同的Spring XML配置元素。
23、在Spring中，处理外部值的最简单方式就是声明属性源并通过Spring的Environment来检索属性。
24、为了使用占位符，我们必须要配置一个PropertyPlaceholderConfigurer bean或PropertySourcesPlaceholderConfigurer bean。从Spring3.1开始，推荐使用PropertySourcesPlaceholderConfigurer，因为它能够基于Spring Environment及其属性源来解析占位符。
    在Spring装配中，占位符的形式为使用 “${...}” 包装的属性名称。
    在自动装配中，可以使用@Value注解实现相同的功能。
25、SpEL表达式的形式为 “#{...}” 。
    在SpEL表达式中，为了避免方法调用时出现NullPointerException，我们可以使用类型安全的运算符“?.”，这个运算符在访问它右边的内容之前，确保它所对应的元素不是null，否则表达式的返回值会是null。
