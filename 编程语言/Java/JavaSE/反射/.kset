0、反射机制：
    反射很脆弱；

1、Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言的关键。
2、反射是一种功能强大且复杂的机制，不过，主要是开发工具的程序员对它感兴趣，一般的应用程序员并不需要考虑反射机制。
3、Class对象会描述一个特定类的属性。
    获取Class类对象有3种方法：
        o.getClass()
        Class.forName()
        Class.class
    Class对象实际上描述的是一个类型，这可能是类，也可能不是类。例如，int不是类，但 int.class 确实是一个Class类型的对象。
    Class类实际上是一个泛型类。在大多数实际应用中，可以忽略类型参数，而使用原始的Class类。
    虚拟机为每个类型管理一个唯一的Class对象。因此，可以使用 == 运算符比较两个类对象。
    getPackageName方法对于数组返回元素类型的包名，对于基本类型则返回“java.lang” 。

4、java.lang.reflect包中有3个类Field、Method和Constructor，分别用于描述类的字段、方法和构造器。
5、Field类：
    Java安全机制允许查看一个对象有哪些字段，但是除非拥有访问权限，否则不允许读写那些字段的值。只能对可以访问的字段使用 get和set 方法，否则会抛出IllegalAccessException ；
    将来的库有可能使用可变句柄（variable handle）而不是反射来读写字段；

6、Method类：
    Java的设计者曾说过：方法指针很危险，而且很容易出错；
    反射机制允许你调用任意的方法；
    对于静态方法，第一个参数会忽略，即可以将它设置为 null ；
    利用Method对象可以实现C语言中函数指针（或C#中的委托）所能完成的所有操作；
    invoke的参数和返回值必须是Object类型。这就意味着必须来回进行多次强制类型转换。这样一来，编译器会丧失检查代码的机会，以至于等到测试阶段才会发现错误，而这个时候查找和修正错误会麻烦的多；
    使用反射获得方法指针的代码要比直接调用方法的代码慢得多；
    建议仅在绝对必要的时候才在你自己的程序中使用Method对象。通常，更好的做法是使用接口以及Java8引入的lambda表达式；
    建议Java开发人员不要使用回调函数的Method对象。可以使用回调的接口，这样不仅代码的执行速度更快，也更易于维护；     ？

7、Constructor类：

8、可以利用Modifier类的静态方法分析getModifiers返回的整数。
9、Class类中的getFields、getMethods、getConstructors方法将分别返回这个类支持的公共字段、方法和构造器的数组，其中包括超类的公共成员。Class类的getDeclaredFields、getDeclaredMethods和getDeclaredConstructors方法将分别返回这个类中声明的全部字段、方法和构造器组成的数组，其中包括私有成员、包成员和受保护成员，以及有包访问权限的成员，但不包括超类的成员。
    以上方法对于不存在结果的返回长度为0的数组；
10、反射机制的限制：
    反射机制的默认行为受限于Java的访问控制。不过，可以调用setAccessible方法覆盖Java的访问控制；
    如果不允许访问，setAccessible调用会抛出一个异常。访问可能被模块系统或安全管理器拒绝；
    安全管理器并不常用，而且在Java17后已被废弃。不过，在Java9中，由于Java API是模块化的，每个程序都包含模块；
    记住，能够不受控地访问类内部的日子将屈指可数；

11、Method和Constructor类扩展了Executable类。在Java17中，Executable类是密封类，只允许Method和Constructor作为子类。
