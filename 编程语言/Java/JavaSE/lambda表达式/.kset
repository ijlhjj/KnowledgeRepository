0、lambda表达式：
    1、lambda表达式，也可称为闭包，允许把函数作为一个方法的参数，作用是取代大部分内部类，优化Java代码结构，让代码变得更加简洁紧凑。
    2、lambda表达式是一种简洁的方法，用来创建可以在将来某个时间点执行的代码块。
        lambda表达式就是一个代码块，以及必须传入代码的所有变量的规范；
    3、通过使用lambda表达式，可以用一种精巧而简洁的方式表示使用回调和可变行为的代码。

1、lambda表达式开发规范：
    即使lambda表达式没有参数，仍然要提供空括号，就像无参数方法一样；
    如果可以推导出一个lambda表达式的参数类型，则可以忽略其类型声明；
    lambda表达式实际上属于函数式接口中单一抽象方法的实现，因此只能抛出在抽象方法签名中声明的受检异常；
    在Java中，对lambda表达式所能做的也只是转换为函数式接口；
    如果方法只有一个参数，而且这个参数的类型可以推导得出，那么甚至还可以省略小括号；
    无须指定lambda表达式的返回类型。lambda表达式的返回类型总是会由上下文推导得出；
    如果一个lambda表达式只在某些分支返回一个值，而另外一些分支不返回值，这是不合法的；
    在lambda表达式中，只能引用值不会改变的变量。这个限制是有原因的。如果在lambda表达式中更改变量，并发执行多个动作时就会不安全；
    lambda表达式中捕获的变量必须是事实最终变量。事实最终变量是指，这个变量初始化之后就不会再为它赋新值；
    lambda表达式的体与嵌套块有相同的作用域；
    在lambda表达式中声明与一个局部变量同名的参数或局部变量是不合法的；
    在一个lambda表达式中使用this关键字时，是指创建这个lambda表达式的方法的this参数；
    使用lambda表达式的重点是延迟执行；

2、Java设计者没有为Java语言增加函数类型。甚至不能把lambda表达式赋给类型为Object的变量，Object不是一个函数式接口。
3、Java API在java.util.function包中定义了很多非常通用的函数式接口。
4、类似Comparator的接口往往有一个特定的用途，而不只是提供一个有指定参数和返回类型的方法。想要用lambda表达式做某些处理时，还是希望谨记表达式的用途，为它建立一个特定的函数式接口。
5、方法引用：只有当lambda表达式的体只调用一个方法而不做其他操作时，才能把lambda表达式重写为方法引用。
    方法引用主要有3种情况：
        object::instanceMethod          方法引用等价于一个lambda表达式，其参数要传递到方法
        Class::instanceMethod           第1个参数会成为方法的隐式参数
        Class::staticMethod             所有参数都传递到静态方法
    如果有多个同名的重载方法，编译器就会尝试从上下文中找出你指的是哪一个方法；
    类似于lambda表达式，方法引用不会独立存在，总是会转换为函数式接口的实例；
    可以在方法引用中使用this和super参数；
    方法引用指示编译器生成一个函数式接口的实例，覆盖这个接口的抽象方法来调用给定的方法；

6、类似于lambda表达式，方法引用也不是一个对象。不过，为一个类型为函数式接口的变量赋值时会生成一个对象。     ？
7、构造器引用与方法引用很类似，只不过方法名为new 。
8、Java有一个限制：无法构造泛型类型 T 的数组。数组构造器引用对于克服这个限制很有用。
9、根据定义，任何只有一个抽象方法的接口都是函数式接口，并不是必须使用@FunctionalInterface注解。
