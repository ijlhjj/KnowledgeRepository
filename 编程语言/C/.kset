0、C 语言规范：
    语句以分号结束；
    符号常量名通常用大写字母；
    C 语言区分大小写；
    变量名使用小写字母；
    关键字不能用作变量名；
    空白符包括空格符、横向制表符、换行符、回车符、纵向制表符以及换页符；

1、基本数据类型：
    数据类型的取值范围取决于具体的机器。

    类型              名称                  字节数                     取值范围
    char            字符型                 sizeof(char)            CHAR_MIN - CHAR_MAX
    short           短整型                 sizeof(short)           SHRT_MIN - SHRT_MAX                 
    int             整型                   sizeof(int)             INT_MIN - INT_MAX
    long            长整型                 sizeof(long)            LONG_MIN - LONG_MAX
    float           浮点型                 sizeof(float)           FLT_MIN - FLT_MAX
    double          双精度浮点型           sizeof(double)          DBL_MIN - DBL_MAX

1、ANSI C 转义字符：
    \a              响铃符
    \b              回退符
    \f              换页符
    \n              换行符
    \r              回车符
    \t              横向制表符
    \v              纵向制表符
    \\              反斜杠
    \?              问号
    \'              单引号
    \"              双引号
    \ooo            3位八进制数表示的字符
    \xhh            2位十六进制数表示的字符

2、一个 C 语言程序，无论其大小如何，都是由函数和变量组成的。
3、通常情况下，函数的命名没有限制。
    但 main 是一个特殊的函数名——每个程序都从 main 函数的起点开始执行。
    这意味着每个程序都必须在某个位置包含一个 main 函数。
4、包含在 /* 与 */ 之间的字符序列（注释）将被编译器忽略。
    程序中允许出现空格、制表符和换行符之处，都可以使用注释。
5、在 C 语言中，所有变量都必须先声明后使用。声明通常放在函数起始处，在任何可执行语句之前。
6、在 C 语言中，整数除法操作将执行舍位，结果中的任何小数部分都会被舍弃。 
7、在允许使用某种类型变量值的任何场合，都可以使用该类型的更复杂的表达式。
8、使用 #define 指令可以定义符号常量。
    #define 名字 替换文本
    #define 指令行的末尾没有分号。
9、C 语言以 '\0' 字符作为字符串结束标志。
10、C 语言的文件结束符定义为 EOF（end of file，文件结束）。
11、由 && 或 || 连接的表达式由左至右求值，并保证在求值过程中只要能够判断最终的结果为真或假，求值就立即终止。
12、一般来说，main 函数返回值为 0 表示正常终止，返回值为非 0 表示出现异常情况或出错结束条件。
13、在 C 语言中，所有函数参数都是“通过值”传递的。
14、函数中的局部变量只在函数被调用时存在，在函数执行完毕退出时消失。
    而外部变量是永久存在的，它们的值在一次函数调用到下一次函数调用之间保持不变。
15、在 ANSI C 中，如果要声明空参数表，则必须使用关键字 void 进行显式声明。
16、“定义”表示创建变量或分配存储单元，而“声明”指的是说明变量的性质，但并不分配存储单元。
17、变量名是由字母和数字组成的序列，但其第一个字符必须为字母。
    下划线 “_” 被看作是字母，通常用于命名较长的变量名，以提高其可读性。
    由于例程的名字通常以下划线开头，因此变量名不要以下划线开头。
18、数值常量：
    int                 没有后缀
    long                l 或 L 结尾
    unsigned            u 或 U 结尾
    unsigned long       ul 或 UL 结尾
    double              没有后缀
    float               f 或 F 结尾
    long double         l 或 L 结尾

    十进制整型          没有前缀
    八进制整型          0 前缀
    十六进制整型        0x 或 0X 前缀

19、字符常量 '\0' 表示值为 0 的字符，也就是空字符（null）。
    我们通常用 '\0' 的形式代替 0，以强调某些表达式的字符属性，但其数字值为 0
20、字符串常量也叫字符串字面值，是用双引号括起来的 0 个或多个字符组成的字符序列。
    双引号不是字符串的一部分，它只用于限定字符串。
21、从技术角度看，字符串常量就是字符数组。
    字符串的内部表示使用一个空字符 '\0' 作为串的结尾。
    因此，存储字符串的物理存储单元数比括在双引号中的字符数多一个。
    C 语言对字符串的长度没有限制，但程序必须扫描完整个字符串后才能确定字符串的长度。
22、枚举常量是另外一种类型的常量。
    枚举是一个常量整型值的列表。
    在没有显式说明的情况下，enum 类型中第一个枚举名的值为 0，第二个为 1，依此类推。
    如果只指定了部分枚举名的值，那么未指定的枚举名的值将依着最后一个指定值向后递增。
    不同枚举中的名字必须互不相同。同一枚举中不同的名字可以具有相同的值。
23、默认情况下，外部变量与静态变量将被初始化为 0 。未经显式初始化的自动变量的值为未定义值（即无效值）。
24、任何变量的声明都可以使用 const 限定符限定。
    该限定符指定变量的值不能被修改。
    对数组而言，const 限定符指定数组所有元素的值都不能被修改。
    如果试图修改 const 限定符限定的值，其结果取决于具体的实现。
25、C 语言没有指定同一运算符中多个操作数的计算顺序（&&、||、?: 和 , 运算符除外）。
    类似地，C 语言也没有指定函数各参数的求值顺序。
26、默认情况下，外部变量与函数具有下列性质：通过同一个名字对外部变量的所有引用实际上都是引用同一个对象。
27、用 static 声明限定外部变量与函数，可以将其后声明的对象的作用域限定为被编译源文件的剩余部分。
    通过 static 限定外部对象，可以达到隐藏外部对象的目的。
    static 也可用于声明内部变量。static 类型的内部变量是一种只能在某个特定函数中使用但一直占据存储空间的变量。
28、每次进入程序块时，在程序块内声明以及初始化的自动变量都将被初始化。
    静态变量只在第一次进入程序块时被初始化一次。
    自动变量（包括形式参数）可以隐藏同名的外部变量与函数。
29、在不进行显式初始化的情况下，外部变量和静态变量都将被初始化为 0，而自动变量和寄存器变量的初值则没有定义（即初值为无用的信息）。
30、如果某个包含文件的内容发生了变化，那么所有依赖于该包含文件的源文件都必须重新编译。
31、条件编译为在编译过程中根据计算所得的条件值选择性地包含不同代码提供了一种手段。
    可以使用条件编译避免多次重复包含同一文件。
    C 语言专门定义了两个预处理语句 #ifdef 和 #ifndef 用来测试某个名字是否已经定义。
32、指针是一种保存变量地址的变量。
    ANSI C 使用类型 void *（指向 void 的指针）作为通用指针的类型。
    指针只能指向某种特定类型的对象，也就是说，每个指针都必须指向某种特定的数据类型。
    指向 void 类型的指针可以存放指向任何类型的指针，但它不能间接引用其自身。
    任何类型的指针都可以转换为 void * 类型，并且在将它转换回原来的类型时不会丢失信息。
33、一元运算符 & 可用于取一个对象的地址。地址运算符 & 只能应用于内存中的对象，即变量与数组元素。它不能作用于表达式、常量或 register 类型的变量。
34、一元运算符 * 是间接寻址或间接引用运算符。当它作用于指针时，将访问指针所指向的对象。
    如果指针 ip 指向整型变量 x，那么在 x 可以出现的任何上下文中都可以使用 *ip
35、数组名所代表的是数组第一个元素的地址（即 a[0] 的地址）。
    通过数组下标所能完成的任何操作都可以通过指针来实现。
    一般来说，用指针编写的程序比用数组下标编写的程序执行速度快。
    如果 pa 指向数组中的某个特定元素，根据指针运算的定义，pa+1 将指向下一个元素，pa+i 将指向 pa 所指向数组元素之后的第 i 个元素，而 pa-i 将指向数组元素之前的第 i 个元素。
    pa+n 表示指针 pa 当前指向的对象之后第 n 个对象的地址。无论指针 pa 指向的对象是何种类型，上述结论都成立。（所有的指针运算都会自动考虑它所指向的对象长度。）
    C 语言保证，0 永远不是有效的数据地址，因此，返回值 0 可用来表示发生了异常事件。
    C 语言的定义保证数组末尾之后的第一个元素的指针算术运算可以正确执行。
    任何指针与 0 进行相等或不等的比较运算都有意义。
    有效的指针运算包括相同类型指针之间的赋值运算；指针同整数之间的加法或减法运算；指向相同数组中元素的两个指针间的减法或比较运算；将指针赋值为 0 或指针与 0 之间的比较运算。
36、在 C 语言中，二维数组实际上是一种特殊的一维数组，它的每个元素也是一个一维数组。
37、调用主函数 main 时，它带有两个参数：argc 用于参数计数，argv 是一个指向字符串数组的指针，其中每个字符串对应一个参数。
    按照 C 语言的约定，argv[0] 的值是启动该程序的程序名，因此 argc 的值至少为 1
    ANSI 标准要求 argv[argc] 的值必须为一空指针。
38、在 C 语言中，函数本身不是变量，但可以定义指向函数的指针。这种类型的指针可以被赋值、存放在数组中、传递给函数以及作为函数的返回值等等。
39、结构是一个或多个变量的集合，这些变量可能为不同的类型，为了处理的方便而将这些变量组织在一个名字之下。
    参数名和结构成员同名不会引起冲突。事实上，使用重名可以强调两者之间的关系。
    千万不要认为结构的长度等于各成员长度的和。因为不同的对象有不同的对齐要求，所以，结构中可能会出现未命名的“空穴”（hole）
40、数组的长度在编译时已经完全确定，它等于数组项的长度乘以项数。
41、条件编译语句 #if 中不能使用 sizeof，因为预处理器不对类型名进行分析。
    但预处理器并不计算 #define 语句中的表达式，因此，在 #define 中使用 sizeof 是合法的。
42、typedef 声明并没有创建一个新类型，它只是为某个已存在的类型增加了一个新的名称而已。
43、联合是可以合法地保存多种数据类型中任何一种类型的对象。
    编译器负责跟踪对象的长度和对齐要求。
    联合读取的类型必须是最近一次存入的类型，程序员负责跟踪当前保存在联合中的类型。如果保存的类型与读取的类型不一致，其结果取决于具体的实现。
    实际上，联合就是一个结构，它的所有成员相对于基地址的偏移量都为 0，此结构空间要大到足够容纳最“宽”的成员，并且，其对齐方式要适合于联合中所有类型的成员。
    联合的访问方式与结构相同：联合名.成员 、 联合指针->成员。
    对联合允许的操作与对结构允许的操作相同：作为一个整体单元进行赋值、复制、取地址及访问其中一个成员。
    联合只能用其第一个成员类型的值进行初始化。
44、文本流由一系列行组成，每一行的结尾是一个换行符。
    如果系统没有遵循这种模式，则标准库将通过一些措施使得该系统适应这种模式。
    例如，标准库可以在输入端将回车符和换行符都转换为换行符，而在输出端进行反向转换。
45、程序中应该使用 EOF 来测试文件是否结束，这样才能保证程序同 EOF 的特定值无关。
46、C 语言用省略号表示参数表中参数的数量和类型是可变的。
    省略号只能出现在参数表的尾部。
    标准头文件 <stdarg.h> 中包含一组宏定义，它们对如何遍历参数表进行了定义。
    该头文件的实现因不同的机器而不同，但提供的接口是一致的。
47、FILE * 称为文件指针，它指向一个包含文件信息的结构，这些信息包括：缓冲区的位置、缓冲区中当前字符的位置、文件的读或写状态、是否出错或是否已经到达文件结尾等等。
48、按照惯例，返回值 0 表示一切正常，而非 0 返回值通常表示出现了异常情况。
49、当程序正常终止时，程序会自动为每个打开的文件调用 fclose 函数。
    exit 为每个已打开的输出文件调用 fclose 函数。
50、malloc 函数分配成功时，返回一个指针，该指针指向 n 字节长度的未初始化的存储空间，否则返回 NULL
    calloc 函数分配成功时，返回一个指针，该指针指向足以容纳 n 个指定长度的对象组成的数组，否则返回 NULL。该存储空间被初始化为 0
    根据请求的对象类型，malloc 或 calloc 函数返回的指针满足正确的对齐要求。
    存储空间的释放顺序没有什么限制，但是，如果释放一个不是通过 malloc 或 calloc 函数得到的指针所指向的存储空间，将是一个很严重的错误。
